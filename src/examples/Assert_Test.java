package examples;

public class Assert_Test {
   int factorial(int n) {
      // Факториал отрицательного числа не считается
      assert (n >= 0);

      // Если n превысит 10, то это может привести либо к целочисленному
      // переполнению результата, либо к переполнению стэка.
      assert (n <= 10);

      if (n < 2) {
         return 1;
      }

      return factorial(n - 1) * n;
   }

   // мы 'забыли' об ограничениях функции factorial() и пытаемся вычислить
// факториалы чисел от 0 до 99.
//
// проверка внутри factorial() любезно напомнит нам о своих ограничениях,
// так что мы сможем быстро выявить и исправить этот баг.
//
// если бы эта проверка отсутствовала, то баг мог бы долго оставаться
// незамеченным, периодически давая о себе знать переполнениями стэка и
// некорректным поведением программы.
   public static void main(String[] args) {
      int x=-1;
      assert x<0;


      int[] a=new int[172];
      Assert_Test mane=new Assert_Test();
      for (int i = 0; i < 172; ++i) {
         a[i] = mane.factorial(i);
      }
   }
}
